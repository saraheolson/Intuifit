
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  profileInfo: 'profileInfo',
  stripeCustomerId: 'stripeCustomerId'
};

exports.Prisma.CoachScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  businessName: 'businessName',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionId: 'subscriptionId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  coachId: 'coachId',
  onboardingData: 'onboardingData'
};

exports.Prisma.GlobalExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  videoUrl: 'videoUrl',
  instructionsText: 'instructionsText',
  defaultSets: 'defaultSets',
  defaultReps: 'defaultReps',
  defaultWeight: 'defaultWeight',
  weightType: 'weightType',
  weightMeasurementType: 'weightMeasurementType',
  createdById: 'createdById'
};

exports.Prisma.CoachExerciseScalarFieldEnum = {
  id: 'id',
  coachId: 'coachId',
  baseExerciseId: 'baseExerciseId',
  name: 'name',
  videoUrl: 'videoUrl',
  instructionsText: 'instructionsText',
  defaultSets: 'defaultSets',
  defaultReps: 'defaultReps',
  defaultWeight: 'defaultWeight',
  weightType: 'weightType',
  weightMeasurementType: 'weightMeasurementType'
};

exports.Prisma.WorkoutScalarFieldEnum = {
  id: 'id',
  coachId: 'coachId',
  title: 'title',
  description: 'description',
  exercises: 'exercises',
  createdAt: 'createdAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  workoutId: 'workoutId',
  clientId: 'clientId',
  scheduledDate: 'scheduledDate',
  status: 'status'
};

exports.Prisma.ProgressLogScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  assignmentId: 'assignmentId',
  exerciseResults: 'exerciseResults',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  sentAt: 'sentAt',
  senderId: 'senderId',
  receiverId: 'receiverId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  coachId: 'coachId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  coach: 'coach',
  client: 'client',
  team_coach: 'team_coach',
  superadmin: 'superadmin'
};

exports.WeightType = exports.$Enums.WeightType = {
  bodyweight: 'bodyweight',
  kettlebell: 'kettlebell',
  dumbbell: 'dumbbell',
  band: 'band',
  machine: 'machine',
  other: 'other'
};

exports.WeightMeasurementType = exports.$Enums.WeightMeasurementType = {
  lbs: 'lbs',
  kg: 'kg',
  other: 'other'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  planned: 'planned',
  in_progress: 'in_progress',
  complete: 'complete'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  paid: 'paid',
  failed: 'failed',
  pending: 'pending'
};

exports.Prisma.ModelName = {
  User: 'User',
  Coach: 'Coach',
  Client: 'Client',
  GlobalExercise: 'GlobalExercise',
  CoachExercise: 'CoachExercise',
  Workout: 'Workout',
  Assignment: 'Assignment',
  ProgressLog: 'ProgressLog',
  Message: 'Message',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
